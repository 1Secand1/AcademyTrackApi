generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum Role {
  student
  teacher
  groupLeader
  manager
  admin
}

model User {
  userId      Int          @id @default(autoincrement()) @map("id")
  surname     String       @db.VarChar(225)
  name        String       @db.VarChar(225)
  patronymic  String?      @db.VarChar(225)

  roles       UserRole[]
  teacher     Teacher?
  student     Student?
  credentials Credentials?
}

model Credentials {
  credentialsId Int                 @id @default(autoincrement()) @map("id")
  login         String              @unique @db.VarChar(55)
  password      String              @db.VarChar(255)
  userId        Int                 @unique
  user          User                @relation(fields: [userId], references: [userId])
  sessions      Session[]
}

model Teacher {
  teacherId   Int                   @id @map("id")
  user        User                  @relation(fields: [teacherId], references: [userId])
  subjects    TeacherGroupSubject[]
}

model Student {
  studentId  Int                    @id @map("id")
  groupId    Int

  user       User                   @relation(fields: [studentId], references: [userId])
  group      Group                  @relation(fields: [groupId], references: [groupId])
  attendance Attendance[]
}

model Group {
  groupId         Int               @id @default(autoincrement()) @map("id")
  groupCode       String            @unique @db.VarChar(15)
  yearOfEntry     Int
  students        Student[]
  teacherSubjects TeacherGroupSubject[]
}

model Subject {
  subjectId   Int                   @id @default(autoincrement()) @map("id")
  name        String                @db.VarChar(100)
  teacherSubjects TeacherGroupSubject[]
}

model TeacherGroupSubject {
  teacherGroupSubjectId Int           @id @default(autoincrement()) @map("id")
  teacherId   Int
  teacher     Teacher               @relation(fields: [teacherId], references: [teacherId])
  groupId     Int
  group       Group                 @relation(fields: [groupId], references: [groupId])
  subjectId   Int
  subject     Subject               @relation(fields: [subjectId], references: [subjectId])
  schedules   Schedule[]
}

model Attendance {
  attendanceId Int        @id @default(autoincrement()) @map("id")
  status       AttendanceStatus
  scheduleId   Int
  schedule     Schedule  @relation(fields: [scheduleId], references: [scheduleId])
  studentId    Int
  student      Student   @relation(fields: [studentId], references: [studentId])
}

model Session {
  sessionId     Int                @id @default(autoincrement()) @map("id")
  token         String             @unique @db.VarChar(255)
  credentialsId Int
  credentials   Credentials        @relation(fields: [credentialsId], references: [credentialsId])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  expiresAt     DateTime
}

model UserRole {
  userId Int
  role   Role
  user   User @relation(fields: [userId], references: [userId])

  @@id([userId, role])
}

model Schedule {
  scheduleId            Int                   @id @default(autoincrement()) @map("id")
  lessonNumber          Int
  date                  DateTime
  teacherGroupSubjectId Int
  teacherGroupSubject   TeacherGroupSubject   @relation(fields: [teacherGroupSubjectId], references: [teacherGroupSubjectId])

  attendances           Attendance[]
}
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int          @id @default(autoincrement()) @map("id")
  surname     String       @db.VarChar(225)
  name        String       @db.VarChar(225)
  patronymic  String?      @db.VarChar(225)
  credentials Credentials?
  student     Student?
  teacher     Teacher?
  roles       UserRole[]
}

model Credentials {
  credentialsId Int       @id @default(autoincrement()) @map("id")
  login         String    @unique @db.VarChar(55)
  password      String    @db.VarChar(255)
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [userId])
  sessions      Session[]
}

model Teacher {
  teacherId Int                   @id @map("id")
  user      User                  @relation(fields: [teacherId], references: [userId])
  subjects  TeacherGroupSubject[]
}

model Student {
  studentId  Int          @id @map("id")
  groupId    Int
  attendance Attendance[]
  group      Group        @relation(fields: [groupId], references: [groupId])
  user       User         @relation(fields: [studentId], references: [userId])
}

model Group {
  groupId         Int                   @id @default(autoincrement()) @map("id")
  groupCode       String                @unique @db.VarChar(15)
  name            String?               @db.VarChar(100)
  specialty       String?               @db.VarChar(50)
  course          Int                   @default(1)
  yearOfEntry     Int
  students        Student[]
  teacherSubjects TeacherGroupSubject[]
  schedules       Schedule[]
}

model Subject {
  subjectId       Int                   @id @default(autoincrement()) @map("id")
  name            String                @db.VarChar(100)
  teacherSubjects TeacherGroupSubject[]
}

model TeacherGroupSubject {
  teacherGroupSubjectId Int           @id @default(autoincrement()) @map("id")
  teacherId   Int
  teacher     Teacher               @relation(fields: [teacherId], references: [teacherId])
  groupId     Int
  group       Group                 @relation(fields: [groupId], references: [groupId])
  subjectId   Int
  subject     Subject               @relation(fields: [subjectId], references: [subjectId])
  semester    Int                   @default(1)
  schedules   Schedule[]

  @@unique([groupId, subjectId, semester])
  @@index([groupId])
  @@index([teacherId])
  @@index([subjectId])
}

model Attendance {
  attendanceId Int              @id @default(autoincrement()) @map("id")
  scheduleId   Int
  studentId    Int
  status       AttendanceStatus @default(PRESENT)
  schedule     Schedule         @relation(fields: [scheduleId], references: [scheduleId])
  student      Student          @relation(fields: [studentId], references: [studentId])
}

model Session {
  sessionId     Int         @id @default(autoincrement()) @map("id")
  token         String      @unique @db.VarChar(255)
  credentialsId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  expiresAt     DateTime
  credentials   Credentials @relation(fields: [credentialsId], references: [credentialsId])
}

model UserRole {
  userId Int
  role   Role
  user   User @relation(fields: [userId], references: [userId])

  @@id([userId, role])
}

model Schedule {
  scheduleId            Int                   @id @default(autoincrement()) @map("id")
  lessonNumber          Int
  date                  DateTime
  teacherGroupSubjectId Int
  groupId               Int
  teacherGroupSubject   TeacherGroupSubject   @relation(fields: [teacherGroupSubjectId], references: [teacherGroupSubjectId])
  group                 Group                 @relation(fields: [groupId], references: [groupId])
  timeSlot              Int                   @default(1)
  attendances           Attendance[]

  @@unique([groupId, date, lessonNumber])
  @@index([teacherGroupSubjectId])
}

enum Role {
  teacher
  admin
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
